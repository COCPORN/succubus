{"name":"Succubus","tagline":"A \"service bus\" implementation created on top of ZeroMQ","body":"Succubus\r\n========\r\n\r\nA light .NET \"service bus\" implementation created on top of ZeroMQ.\r\n\r\nAbout\r\n-----\r\n\r\nSuccubus is a simple (at this point) implementation of convenience functions for .NET on top of ZeroMQ, presenting an interface similar to that of MassTransit. It is similar to an Enterprise Service Bus, but lacks a lot of features at its current state.\r\n\r\nBecause it uses ZeroMQ, all brokers live in the Succubus process space, and you do not install anything besides the dependencies in the library.\r\n\r\nFor more in-depth documentation, check the [wiki](https://github.com/COCPORN/succubus/wiki).\r\n\r\nSuccubus is currently in a pre-release but usable state. The repository will go public once it reaches a 0.2-release.\r\n\r\nGetting started\r\n---------------\r\n\r\nA quickstart guide to getting started with Succubus.\r\n\r\nInstallation\r\n------------\r\n\r\nGet lastest version of Succubus from GitHub or NuGet.\r\n\r\nInstantiation\r\n-------------\r\n\r\nTo instantiate a handle to the bus, create an instance of `Succubus.Core.Bus`:\r\n```C#\r\nIBus bus = new Succubus.Core.Bus();\r\n```\r\n\r\nEach handle will have a separate channel to the message host.\r\n\r\nSingleton instantiation\r\n-----------------------\r\n\r\nSuccubus allows you to get a singleton instance in addition to newing up objects. Note that the singleton object will always (obviously) point to the same instance, while all newed objects will be different. These can co-exist and will use separate message channels:\r\n\r\n```C#\r\nBus.Instance.Initialize(config => {\r\n    config.UseMessageHost();\r\n});\r\n```\r\n\r\nInitialization\r\n--------------\r\n\r\nBefore using the bus, it needs to be initialized:\r\n\r\n```C#\r\nBus.Instance.Initialize();\r\n```\r\n\r\nThe `Initialize`-call to the bus alternatively returns a configuration handle.\r\n\r\n```C#\r\nbus.Initialize(succubus =>\r\n{\r\n    succubus.UseMessageHost();               \r\n});\r\n```\r\n\r\nWhen using the parameterless Initialize call, the bus will be initialized with default values.\r\n\r\nConfiguration\r\n-------------\r\n\r\nThere are a number of methods that allow you to configure your bus instance before using it. These calls can be found in the `IBusConfigurator`-interface, but will be documented in detail in the future.\r\n\r\n```C#\r\npublic interface IBusConfigurator\r\n{        \r\n    void UseMessageHost(int publishPort = 9000, int subscribePort = 9001, bool setupHost = true);\r\n    void UseMessageHost(IMessageHost messageHost);\r\n    void SetNetwork(string networkName);\r\n    void SetMessageHostname(string hostname);\r\n}\r\n```\r\n\r\nMost of these should be self explanatory.\r\n\r\n### UseMessageHost\r\n\r\nWhere to find the message host. \r\n\r\n### SetNetwork\r\n\r\nThis is the most coarse filter Succubus allows you to set. If you have multiple services running on the messagehost, you can set the network name to different strings, and the messages will not be published on other clients.\r\n\r\n### SetMessageHostname\r\n\r\nIf you are running with a remote messagehost, you can set the hostname for the messagehost here.\r\n\r\n### StartupMessageHost\r\n\r\nIf this configuration method is called, the bus will run a messagehost on localhost as part of this bus instance.\r\n\r\nEvents\r\n------\r\n\r\nSuccubus supports publishing and consuming events. Events are agnostic to where they are posted from and who consumes them. A single event can have multiple consumers.\r\n\r\n### Publishing events\r\n\r\nPublish events by calling the `Publish`-method:\r\n\r\n```C#\r\nbus.Publish(new BasicEvent { Message = \"Hi, there! \"});\r\n```\r\n\r\n`BasicEvent` is a user defined POCO-class:\r\n\r\n```C#\r\npublic class BasicEvent\r\n{\r\n    public string Message { get; set; }\r\n}\r\n```\r\n\r\n### Consuming events\r\n\r\nIf you are interested in handling an event, use the `On`-method:\r\n\r\n```C#\r\nbus.On<BasicEvent>(e => {\r\n\tConsole.WriteLine(\"Got event: {0}\", e.Message)\r\n});\r\n```\r\n\r\nSynchronous processing\r\n----------------------\r\n\r\nSuccubus supports two types of synchronous calling; static and transient routes. A transient route is setup as the call is made, and is removed after a call has been processed, while a static route is permanent in the bus.\r\n\r\nWhen using synchronous processing, the _client_ side of the interaction needs to use a variation of the `Call`-method and the _server_ side then replies using the `ReplyTo`-method.\r\n\r\n### Replying to messages\r\n\r\nWhen a message is presented from the bus after being sent with the `Call`-method, it can be handled with the `ReplyTo`-method:\r\n\r\n```C#\r\nbus.ReplyTo<BasicRequest, BasicResponse>(request => {\r\n\treturn new BasicResponse { Message = request.Message + \" echoed from server\" };\r\n});\r\n```\r\n\r\nNote that `BasicRequest` and `BasicResponse` are user defined POCO-classes; Succubus will handle any routing information behind the scenes.\r\n\r\n### Transient routes\r\n\r\nTransient routes are simple request/response-pairs.\r\n\r\n```C#\r\nbus.Call<Request, Response>(new Request { Message = \"Hi from client\"},\r\n\tresponse => {\r\n\t\tConsole.WriteLine(\"Got response from server: {0}\", response.Message);\r\n\t});\r\n```\r\n\r\nA transient call with request/response-parameters will register a route and wrap the request/response objects in a `SynchronousMessageFrame` which decorates the messages with `CorrelationId`s. If multiple responses are made to the same synchronous call, only the first will be handled in the defined response handler, while the other messages will be raised as events.\r\n\r\n### Static routes\r\n\r\nStatic routes allow for reuse of handler structures and more advanced orchestration.\r\n\r\n```C#\r\nbus.OnReply<BasicRequest, BasicResponse>((request, response) => \r\n    Console.WriteLine(\"OnReply<TReq, TRes>: Got a response handled on static handler: {0} => {1}\", \r\n    request.Message, \r\n    response.Message));\r\nbus.Call<BasicRequest>(new BasicRequest { Message = \"Hello from client\"} );\r\n```\r\n\r\nSuccubus will store the request until the response arrives, so both can be handled in the same context.\r\n\r\n### Timeouts\r\n\r\nSynchronized processing supports timeout handlers on a per-`Call` basis. Example:\r\n\r\n```C#\r\nbus.Call(new BasicRequest { Message = \"Hello! \"}, (req) => {\r\n\tConsole.WriteLine(\"BasicRequest timed out for: {0}\", req.Message)\r\n}, 2500); // Timeout in milliseconds\r\n```\r\n\r\nIf no parameters are provided, the call will time out silently after \r\none minute. To make a response handler never time out, manually provide\r\nthe value of 0.\r\n\r\n### Orchestration\r\n\r\nSynchronous processing in Succubus opens up for complex orchestration of up to 7 responses. Example:\r\n\r\n```C#\r\nbus.OnReply<UpdateRequest, \r\n            ImageProcessed, \r\n            FriendNotified>((ur, ip, fn) =>\r\n{\r\n\tConsole.WriteLine(\"New profile image has been processed with response: {0}\", ip.Status);\r\n\tConsole.WriteLine(\"Friends have been notified with response: {0}\", fn.Status);\r\n});\r\n\t\r\n```\r\n\r\n### Deferrence\r\n\r\nSuccubus supports deferring message handling. This is convenient when you are doing synchronous processing, but the response set needs to be handled in another context than where the request was posted.\r\n\r\nTo use, simply:\r\n\r\n```C#\r\nbus.ReplyTo<BasicRequest, BasicResponse>(req => new BasicResponse {\r\n\tMessage = \"From server: \" + req.Message;\r\n});\r\n\r\nbus.Defer<BasicRequest, BasicResponse>();\r\n\r\nGuid cId = bus.Call(new BasicRequest { Message = \"Deferred \"});\r\n\r\nbus.Pickup<BasicRequest, BasicResponse>(cId, (req, res) =>\r\n{\r\n\r\n});\r\n```\r\n\r\nThe call to `Pickup` will _block_. Also, deferred calls will by default be held for one minute, or be removed from the bus as soon as they are picked up.\r\n\r\nWorkload management\r\n-------------------\r\n","google":"UA-45195914-1","note":"Don't delete this file! It's used internally to help with page regeneration."}